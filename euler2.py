#!/usr/bin/env python3 -u
# -*- coding: utf-8 -*-
"""
Project Euler: Problem 2
========================

https://projecteuler.net/problem=2

Even Fibonacci numbers
----------------------
Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will
be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
"""
from itertools import islice, takewhile

import pytest


target = 4e6
answer = 4613732


def even_fibonacci():
    """Yield even Fibonacci numbers, starting with 2."""
    a, b = 2, 3
    while True:
        yield a
        # Every third Fibonacci number is even, so just skip two terms
        a, b = a + 2 * b, 2 * a + 3 * b


def test_even_fibonacci():
    assert list(islice(even_fibonacci(), 6)) == [2, 8, 34, 144, 610, 2584]


def sum_of_even_fibonacci_numbers_lte(n):
    """Return the sum of all even-valued Fibonacci numbers <= n."""
    return sum(takewhile(n.__ge__, even_fibonacci()))


@pytest.mark.parametrize('n, expected', [
    (-1, 0),
    (0, 0),
    (1, 0),
    (2, 2),
    (8, 2 + 8),
    (89, 2 + 8 + 34),
    (target, answer),
    ])
def test_sum_of_even_fibonacci_numbers_lte(n, expected):
    assert sum_of_even_fibonacci_numbers_lte(n) == expected


if __name__ == '__main__':
    print(sum_of_even_fibonacci_numbers_lte(target))
